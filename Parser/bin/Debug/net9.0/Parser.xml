<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Parser</name></assembly>
<members>
<member name="T:Parser.AST.Expr">
<summary>
 A MicroML expression
</summary>
</member>
<member name="M:Parser.AST.toString(Parser.AST.Expr)">
<summary>
 Pretty-print an Expr as an indented tree
</summary>
</member>
<member name="M:Parser.Parsing.parse(System.String)">
<summary>
 Top-level parse: require EOF after the expression
</summary>
</member>
<member name="P:Parser.Parsing.letParser">
<summary>
 Let-binding: `let x = expr in expr`
</summary>
</member>
<member name="P:Parser.Parsing.lambdaParser">
<summary>
 Lambda: `fun x -&gt; expr`
</summary>
</member>
<member name="P:Parser.Parsing.application">
<summary>
 Function application: one or more atoms, left-associative
</summary>
</member>
<member name="P:Parser.Parsing.atom">
<summary>
 A simple atomic term (no application)
</summary>
</member>
<member name="P:Parser.Parsing.parenExpr">
<summary>
 Parenthesized sub-expression: `( expr )`
</summary>
</member>
<member name="P:Parser.Parsing.expr">
<summary>
 Forward declaration of `expr` so we can be recursive
</summary>
</member>
<member name="P:Parser.Parsing.exprRef">
<summary>
 Forward declaration of `expr` so we can be recursive
</summary>
</member>
<member name="P:Parser.Parsing.pint_ws">
<summary>
 Parse a 32-bit integer literal
</summary>
</member>
<member name="P:Parser.Parsing.identifier">
<summary>
 Parse an identifier that is **not** a reserved keyword
</summary>
</member>
<member name="M:Parser.Parsing.ws``1">
<summary>
 Consume trailing whitespace
</summary>
</member>
</members>
</doc>
