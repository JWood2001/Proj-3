<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Parser</name></assembly>
<members>
<member name="T:Parser.AST.Expr">
<summary>
 A MicroML expression
</summary>
</member>
<member name="M:Parser.AST.toString(Parser.AST.Expr)">
<summary>
 Pretty-print an Expr as an indented tree
</summary>
</member>
<member name="M:Parser.Parsing.parse(System.String)">
<summary>
 Public parse function returning a Result&lt;Expr,string&gt;
</summary>
</member>
<member name="P:Parser.Parsing.app">
<summary>
 Function application: chain of simple terms
</summary>
</member>
<member name="P:Parser.Parsing.simple">
<summary>
 Simple term: literal, var, lambda, let, or parenthesized
</summary>
</member>
<member name="P:Parser.Parsing.letParser">
<summary>
 Let-binding: let x = expr in expr
</summary>
</member>
<member name="P:Parser.Parsing.lambdaParser">
<summary>
 Lambda: fun x -&gt; expr
</summary>
</member>
<member name="M:Parser.Parsing.paren``2(Microsoft.FSharp.Core.FSharpFunc{FParsec.CharStream{``1},FParsec.Reply{``0}})">
<summary>
 Parenthesized parser helper
</summary>
</member>
<member name="P:Parser.Parsing.expr">
<summary>
 Forward declaration for recursive expressions
</summary>
</member>
<member name="P:Parser.Parsing.exprRef">
<summary>
 Forward declaration for recursive expressions
</summary>
</member>
<member name="P:Parser.Parsing.pint_ws">
<summary>
 Integer literal parser
</summary>
</member>
<member name="P:Parser.Parsing.identifier">
<summary>
 Identifier: letter (letter|digit|_)*
</summary>
</member>
<member name="M:Parser.Parsing.ws``1">
<summary>
 Whitespace parser
</summary>
</member>
</members>
</doc>
